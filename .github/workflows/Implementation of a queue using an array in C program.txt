//Implementation of a queue using an array in C program

#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100

typedef struct
{
    int items[MAX_SIZE];
    int front;
    int rear;
} Queue;

Queue* createQueue()
{
    Queue* queue=(Queue*)malloc(sizeof(Queue));
    queue->front=-1;
    queue->rear=-1;
    return queue;
}

int isEmpty(Queue* queue)
{
    return(queue->front==-1&&queue->rear==-1);
}

int isFull(Queue* queue)
{
    return (queue->rear+1)%MAX_SIZE==queue->front;
}

void enqueue(Queue* queue, int val)
{
    if (isFull(queue))
    {
        printf("Queue is full. Cannot enqueue element.\n");
        return;
    } 
    else if (isEmpty(queue))
    {
        queue->front=0;
        queue->rear=0;
    }
    else
    {
        queue->rear=(queue->rear+1)%MAX_SIZE;
    }
    queue->items[queue->rear]=val;
}

void dequeue(Queue* queue)
{
    if (isEmpty(queue))
    {
        printf("Queue is empty. Cannot dequeue element.\n");
        return;
    } 
    else if (queue->front==queue->rear)
    {
        queue->front=-1;
        queue->rear=-1;
    }
    else
    {
        queue->front=(queue->front+1)%MAX_SIZE;
    }
}

int front(Queue* queue)
{
    if (isEmpty(queue))
    {
        printf("Queue is empty. Cannot retrieve front element.\n");
        return -1;
    }
    return queue->items[queue->front];
}

void printQueue(Queue* queue)
{
    if (isEmpty(queue))
    {
        printf("Queue is empty.\n");
        return;
    }
    int i;
    for (i=queue->front;i!=queue->rear;i=(i+1)%MAX_SIZE)
    {
        printf("%d ",queue->items[i]);
    }
    printf("%d\n",queue->items[i]);
}

int main()
{
    Queue* queue=createQueue();
    int n,val;
    scanf("%d",&n);
    while(n--)
    {
        scanf("%d",&val);
        enqueue(queue,val);
    }
    printQueue(queue);
    printf("Front: %d\n",front(queue));
    dequeue(queue);
    dequeue(queue);
    printQueue(queue);
    printf("Front: %d\n",front(queue));
    enqueue(queue,40);
    enqueue(queue,50);
    printQueue(queue);
    printf("Front: %d\n",front(queue));
    return 0;
}